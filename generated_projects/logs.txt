On line: whenFlag() {
On line:     penClear() 
On line:     setfx("ghost", 100) 
On line:     clearCounter()
On line:     setvar($resolution, 1) 
On line:     setPenSize($resolution) 
On line:     gotoXY(-150, 150) 
On line:     hexPen("#000000") 
On line:     setPen("brightness", 100)
On line:     penDown()
On line:     setvar($maxIterations, 100)
On line:     setvar($xMin, -2.0)
On line:     setvar($xMax, 1.0)
On line:     setvar($yMin, -1.5)
On line:     setvar($yMax, 1.5)
Increasing stack height: $resolution at depth: 1 with limit: 0
On line:     setvar($width, divide(300, $resolution))  
Increasing stack height: $resolution at depth: 1 with limit: 0
On line:     setvar($height, divide(300, $resolution)) 
On line:     setvar($steps, 0)     
On line:     setvar($stepsX, 0)    
On line:     repeat($height) {
Processing line 32:         # Calculate the Y-coordinate for the current row (bracket depth: 1), False
Processing line 33:         setvar($y, add($yMax, multiply(divide($steps, $height), subtract($yMin, $yMax)))) (bracket depth: 1), False
Processing line 34:         setvar($stepsX, 0) # Reset horizontal steps for each row (bracket depth: 1), False
Processing line 35:  (bracket depth: 1), False
Processing line 36:         repeat($width) { (bracket depth: 2), False
Processing line 37:             # Calculate the X-coordinate for the current column (bracket depth: 2), False
Processing line 38:             setvar($x, add($xMin, multiply(divide($stepsX, $width), subtract($xMax, $xMin)))) (bracket depth: 2), False
Processing line 39:  (bracket depth: 2), False
Processing line 40:             # Reset variables for the Mandelbrot iteration (bracket depth: 2), False
Processing line 41:             setvar($zRe, 0) (bracket depth: 2), False
Processing line 42:             setvar($zIm, 0) (bracket depth: 2), False
Processing line 43:             setvar($iter, 0) (bracket depth: 2), False
Processing line 44:             setvar($zMagnitude, 0) (bracket depth: 2), False
Processing line 45:  (bracket depth: 2), False
Processing line 46:             while(and(lt($iter, $maxIterations), lt($zMagnitude, 4))) { (bracket depth: 3), False
Processing line 47:                 setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm))) (bracket depth: 3), False
Processing line 48:                 setvar($zIm, add(multiply(2, multiply($zRe, $zIm)), $y)) (bracket depth: 3), False
Processing line 49:                 setvar($zRe, add($zReTemp, $x)) (bracket depth: 3), False
Processing line 50:                 setvar($zMagnitude, add(multiply($zRe, $zRe), multiply($zIm, $zIm))) # Magnitude calculation (bracket depth: 3), False
Processing line 51:                 changeVar($iter, 1) (bracket depth: 3), False
Processing line 52:             } (bracket depth: 2), True
Processing line 53:  (bracket depth: 2), False
Processing line 54:             # Determine pixel color (bracket depth: 2), False
Processing line 55:             if (equals($iter, $maxIterations)) { (bracket depth: 3), False
Processing line 56:                 hexPen("#000000") # Black for points in the set (bracket depth: 3), False
Processing line 57:             } else { (bracket depth: 3), True
Processing line 58:                 setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient (bracket depth: 3), False
Processing line 59:             } (bracket depth: 2), True
Processing line 60:  (bracket depth: 2), False
Processing line 61:             # Move to the correct position and draw the pixel (bracket depth: 2), False
Processing line 62:             gotoXY(add(-150, multiply($stepsX, $resolution)), subtract(150, multiply($steps, $resolution))) (bracket depth: 2), False
Processing line 63:             penDown() (bracket depth: 2), False
Processing line 64:             move($resolution) # Draw the pixel with adjusted size (bracket depth: 2), False
Processing line 65:             penUp() (bracket depth: 2), False
Processing line 66:  (bracket depth: 2), False
Processing line 67:             changeVar($stepsX, 1) # Increment X step (bracket depth: 2), False
Processing line 68:         } (bracket depth: 1), True
Processing line 69:  (bracket depth: 1), False
Processing line 70:         changeVar($steps, 1) # Increment Y step (bracket depth: 1), False
Processing line 71:     } (bracket depth: 0), True
HERES MY HAUL: ['        # Calculate the Y-coordinate for the current row', '        setvar($y, add($yMax, multiply(divide($steps, $height), subtract($yMin, $yMax))))', '        setvar($stepsX, 0) # Reset horizontal steps for each row', '', '        repeat($width) {', '            # Calculate the X-coordinate for the current column', '            setvar($x, add($xMin, multiply(divide($stepsX, $width), subtract($xMax, $xMin))))', '', '            # Reset variables for the Mandelbrot iteration', '            setvar($zRe, 0)', '            setvar($zIm, 0)', '            setvar($iter, 0)', '            setvar($zMagnitude, 0)', '', '            while(and(lt($iter, $maxIterations), lt($zMagnitude, 4))) {', '                setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm)))', '                setvar($zIm, add(multiply(2, multiply($zRe, $zIm)), $y))', '                setvar($zRe, add($zReTemp, $x))', '                setvar($zMagnitude, add(multiply($zRe, $zRe), multiply($zIm, $zIm))) # Magnitude calculation', '                changeVar($iter, 1)', '            }', '', '            # Determine pixel color', '            if (equals($iter, $maxIterations)) {', '                hexPen("#000000") # Black for points in the set', '            } else {', '                setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient', '            }', '', '            # Move to the correct position and draw the pixel', '            gotoXY(add(-150, multiply($stepsX, $resolution)), subtract(150, multiply($steps, $resolution)))', '            penDown()', '            move($resolution) # Draw the pixel with adjusted size', '            penUp()', '', '            changeVar($stepsX, 1) # Increment X step', '        }', '', '        changeVar($steps, 1) # Increment Y step']
Increasing stack height: $yMax at depth: 1 with limit: 0
Increasing stack height: divide($steps,$height) at depth: 2
Increasing stack height: $steps at depth: 3 with limit: 2
On line:         setvar($y, add($yMax, multiply(divide($steps, $height), subtract($yMin, $yMax))))
On line:         setvar($stepsX, 0) 
On line:         repeat($width) {
Processing line 5:             # Calculate the X-coordinate for the current column (bracket depth: 1), False
Processing line 6:             setvar($x, add($xMin, multiply(divide($stepsX, $width), subtract($xMax, $xMin)))) (bracket depth: 1), False
Processing line 7:  (bracket depth: 1), False
Processing line 8:             # Reset variables for the Mandelbrot iteration (bracket depth: 1), False
Processing line 9:             setvar($zRe, 0) (bracket depth: 1), False
Processing line 10:             setvar($zIm, 0) (bracket depth: 1), False
Processing line 11:             setvar($iter, 0) (bracket depth: 1), False
Processing line 12:             setvar($zMagnitude, 0) (bracket depth: 1), False
Processing line 13:  (bracket depth: 1), False
Processing line 14:             while(and(lt($iter, $maxIterations), lt($zMagnitude, 4))) { (bracket depth: 2), False
Processing line 15:                 setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm))) (bracket depth: 2), False
Processing line 16:                 setvar($zIm, add(multiply(2, multiply($zRe, $zIm)), $y)) (bracket depth: 2), False
Processing line 17:                 setvar($zRe, add($zReTemp, $x)) (bracket depth: 2), False
Processing line 18:                 setvar($zMagnitude, add(multiply($zRe, $zRe), multiply($zIm, $zIm))) # Magnitude calculation (bracket depth: 2), False
Processing line 19:                 changeVar($iter, 1) (bracket depth: 2), False
Processing line 20:             } (bracket depth: 1), True
Processing line 21:  (bracket depth: 1), False
Processing line 22:             # Determine pixel color (bracket depth: 1), False
Processing line 23:             if (equals($iter, $maxIterations)) { (bracket depth: 2), False
Processing line 24:                 hexPen("#000000") # Black for points in the set (bracket depth: 2), False
Processing line 25:             } else { (bracket depth: 2), True
Processing line 26:                 setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient (bracket depth: 2), False
Processing line 27:             } (bracket depth: 1), True
Processing line 28:  (bracket depth: 1), False
Processing line 29:             # Move to the correct position and draw the pixel (bracket depth: 1), False
Processing line 30:             gotoXY(add(-150, multiply($stepsX, $resolution)), subtract(150, multiply($steps, $resolution))) (bracket depth: 1), False
Processing line 31:             penDown() (bracket depth: 1), False
Processing line 32:             move($resolution) # Draw the pixel with adjusted size (bracket depth: 1), False
Processing line 33:             penUp() (bracket depth: 1), False
Processing line 34:  (bracket depth: 1), False
Processing line 35:             changeVar($stepsX, 1) # Increment X step (bracket depth: 1), False
Processing line 36:         } (bracket depth: 0), True
HERES MY HAUL: ['            # Calculate the X-coordinate for the current column', '            setvar($x, add($xMin, multiply(divide($stepsX, $width), subtract($xMax, $xMin))))', '', '            # Reset variables for the Mandelbrot iteration', '            setvar($zRe, 0)', '            setvar($zIm, 0)', '            setvar($iter, 0)', '            setvar($zMagnitude, 0)', '', '            while(and(lt($iter, $maxIterations), lt($zMagnitude, 4))) {', '                setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm)))', '                setvar($zIm, add(multiply(2, multiply($zRe, $zIm)), $y))', '                setvar($zRe, add($zReTemp, $x))', '                setvar($zMagnitude, add(multiply($zRe, $zRe), multiply($zIm, $zIm))) # Magnitude calculation', '                changeVar($iter, 1)', '            }', '', '            # Determine pixel color', '            if (equals($iter, $maxIterations)) {', '                hexPen("#000000") # Black for points in the set', '            } else {', '                setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient', '            }', '', '            # Move to the correct position and draw the pixel', '            gotoXY(add(-150, multiply($stepsX, $resolution)), subtract(150, multiply($steps, $resolution)))', '            penDown()', '            move($resolution) # Draw the pixel with adjusted size', '            penUp()', '', '            changeVar($stepsX, 1) # Increment X step']
Increasing stack height: $xMin at depth: 1 with limit: 0
Increasing stack height: divide($stepsX,$width) at depth: 2
Increasing stack height: $stepsX at depth: 3 with limit: 2
On line:             setvar($x, add($xMin, multiply(divide($stepsX, $width), subtract($xMax, $xMin))))
On line:             setvar($zRe, 0)
On line:             setvar($zIm, 0)
On line:             setvar($iter, 0)
On line:             setvar($zMagnitude, 0)
Increasing stack height: lt($iter,$maxIterations) at depth: 1
Increasing stack height: $iter at depth: 2 with limit: 1
On line:             while(and(lt($iter, $maxIterations), lt($zMagnitude, 4))) {
Processing line 10:                 setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm))) (bracket depth: 1), False
Processing line 11:                 setvar($zIm, add(multiply(2, multiply($zRe, $zIm)), $y)) (bracket depth: 1), False
Processing line 12:                 setvar($zRe, add($zReTemp, $x)) (bracket depth: 1), False
Processing line 13:                 setvar($zMagnitude, add(multiply($zRe, $zRe), multiply($zIm, $zIm))) # Magnitude calculation (bracket depth: 1), False
Processing line 14:                 changeVar($iter, 1) (bracket depth: 1), False
Processing line 15:             } (bracket depth: 0), True
HERES MY HAUL: ['                setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm)))', '                setvar($zIm, add(multiply(2, multiply($zRe, $zIm)), $y))', '                setvar($zRe, add($zReTemp, $x))', '                setvar($zMagnitude, add(multiply($zRe, $zRe), multiply($zIm, $zIm))) # Magnitude calculation', '                changeVar($iter, 1)']
Increasing stack height: multiply($zRe,$zRe) at depth: 1
Increasing stack height: $zRe at depth: 2 with limit: 1
On line:                 setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm)))
Increasing stack height: multiply(2,multiply($zRe,$zIm)) at depth: 1
Increasing stack height: multiply($zRe,$zIm) at depth: 2
Increasing stack height: $zRe at depth: 3 with limit: 2
On line:                 setvar($zIm, add(multiply(2, multiply($zRe, $zIm)), $y))
Increasing stack height: $zReTemp at depth: 1 with limit: 0
On line:                 setvar($zRe, add($zReTemp, $x))
Increasing stack height: multiply($zRe,$zRe) at depth: 1
Increasing stack height: $zRe at depth: 2 with limit: 1
On line:                 setvar($zMagnitude, add(multiply($zRe, $zRe), multiply($zIm, $zIm))) 
On line:                 changeVar($iter, 1)
Substack: scratchtext-72                setvar($zReTemp, subtract(multiply($zRe, $zRe), multiply($zIm, $zIm)))
while
Increasing stack height: $iter at depth: 1 with limit: 0
On line:             if (equals($iter, $maxIterations)) {
Processing line 19:                 hexPen("#000000") # Black for points in the set (bracket depth: 1), False
Processing line 20:             } else { (bracket depth: 1), True
Processing line 21:                 setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient (bracket depth: 1), False
Processing line 22:             } (bracket depth: 0), True
HERES MY HAUL: ['                hexPen("#000000") # Black for points in the set', 'else', '                setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient']
!!! Else ['                hexPen("#000000") # Black for points in the set']['                setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient']
On line:                 hexPen("#000000") 
Substack: scratchtext-87                hexPen("#000000") # Black for points in the set
Increasing stack height: $iter at depth: 2 with limit: 1
On line:                 setPen("brightness", multiply(100, divide($iter, $maxIterations))) 
Substack: scratchtext-91                setPen("brightness", multiply(100, divide($iter, $maxIterations))) # Grayscale gradient
ifelse
Increasing stack height: multiply($stepsX,$resolution) at depth: 1
Increasing stack height: $stepsX at depth: 2 with limit: 1
On line:             gotoXY(add(-150, multiply($stepsX, $resolution)), subtract(150, multiply($steps, $resolution)))
On line:             penDown()
On line:             move($resolution) 
On line:             penUp()
On line:             changeVar($stepsX, 1) 
Substack: scratchtext-56            # Calculate the X-coordinate for the current column
repeat
On line:         changeVar($steps, 1) 
Substack: scratchtext-48        # Calculate the Y-coordinate for the current row
repeat
On line:     penUp()
On line:     timeSay("Mandelbrot Set Complete", 1) 
